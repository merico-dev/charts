"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.parameters = exports.content = exports.name = void 0;

var _from = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/from"));

var _react = _interopRequireWildcard(require("react"));

var _moment = _interopRequireDefault(require("moment"));

var _lodash = require("lodash");

var _prediction = require("../../../../helpers/prediction");

var _singleSeriesLineChart = _interopRequireDefault(require("../single-series-line-chart"));

var _resizable = require("../../../base/resizable");

var name = 'Minimal';
exports.name = name;

function calcAcc(data) {
  data.forEach(function (item, index) {
    if (index === 0) {
      return;
    }

    item.value += data[index - 1].value;
  });
  return data;
}

function calcBurndown(data) {
  for (var i = data.length - 2; i >= 0; i--) {
    data[i].value += data[i + 1].value;
  }

  return data;
}

var content = function Content(_ref) {
  var extendDays = _ref.extendDays,
      dataCount = _ref.dataCount,
      burndown = _ref.burndown;
  var index = 0;
  var randomSeriesData = (0, _react.useMemo)(function () {
    var now = (0, _moment["default"])();
    var ret = (0, _from["default"])(new Array(dataCount), function () {
      return {
        date: now.add(1, 'days').toISOString(),
        value: (0, _lodash.round)(Math.random() * 10)
      };
    });

    if (burndown) {
      return calcBurndown(ret);
    }

    return calcAcc(ret);
  }, [dataCount, burndown]);
  var series = (0, _react.useMemo)(function () {
    var seriesData = randomSeriesData; // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.

    var lastDate = (0, _moment["default"])((0, _lodash.last)(seriesData).date);
    var tailingDates = (0, _from["default"])(new Array(extendDays), function () {
      return {
        date: lastDate.add(1, 'days').toISOString(),
        value: null
      };
    });
    return seriesData.concat(tailingDates);
  }, [index, randomSeriesData, extendDays]);
  var configurations = {
    withTooltip: true,
    legend: {
      enabled: false
    },
    interpolationType: 'linear',
    storkeColor: '#CA4521',
    refPredictionLine: {
      type: _prediction.PREDICTION_TYPES.regressionLinear,
      color: '#CA4521',
      strokeDashArray: '3'
    },
    cartesianGrid: {
      horizontal: false,
      vertical: false
    },
    xAxis: {
      name: '',
      tick: false,
      tickLine: false
    },
    yAxis: {
      tick: false,
      name: '',
      axisLine: false,
      tickLine: false
    },
    labelKey: 'date',
    labelFormatter: {
      type: 'DATE_TIME',
      format: 'YYYY-MM-DD'
    }
  };
  return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("h1", null, "Minimal"), /*#__PURE__*/_react["default"].createElement(_resizable.Resizable, {
    initialWidth: 400,
    initialHeight: 300
  }, /*#__PURE__*/_react["default"].createElement(_singleSeriesLineChart["default"], {
    data: series,
    configurations: configurations
  })));
};

exports.content = content;
var parameters = {
  args: {
    extendDays: 20,
    dataCount: 100,
    burndown: false
  },
  argTypes: {
    extendDays: {
      control: {
        type: 'range',
        min: 0,
        max: 10,
        step: 1
      }
    },
    dataCount: {
      control: {
        type: 'range',
        min: 10,
        max: 100,
        step: 1
      }
    },
    burndown: 'boolean'
  }
};
exports.parameters = parameters;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,