"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.calcAcc = calcAcc;
exports.calcBurndown = calcBurndown;
exports.calcDownwardsSeriesData = exports.calcUpwardsSeriesData = void 0;

var _from = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/from"));

var _moment = _interopRequireDefault(require("moment"));

var _lodash = require("lodash");

var NOW = (0, _moment["default"])();

function calcAcc(data) {
  data.forEach(function (item, index) {
    if (index === 0) {
      return;
    }

    item.value += data[index - 1].value;
  });
  return data;
}

function calcBurndown(data) {
  var copy = (0, _lodash.cloneDeep)(data);

  for (var i = copy.length - 2; i >= 0; i--) {
    copy[i].value += copy[i + 1].value;
  }

  copy.forEach(function (item) {
    item.value += 500;
  });
  return copy;
}

function calcSingleSeriesData(accumulator) {
  var multiplier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var dataCount = arguments.length > 2 ? arguments[2] : undefined;
  var extendDays = arguments.length > 3 ? arguments[3] : undefined;
  var now = NOW.clone();
  var randomBase = accumulator((0, _from["default"])(new Array(dataCount), function () {
    return {
      date: now.add(1, 'days').toISOString(),
      value: (0, _lodash.round)(Math.random() * multiplier)
    };
  })); // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.

  var lastDate = (0, _moment["default"])((0, _lodash.last)(randomBase).date);
  var tailingDates = (0, _from["default"])(new Array(extendDays), function () {
    return {
      date: lastDate.add(1, 'days').toISOString(),
      value: null
    };
  });
  return randomBase.concat(tailingDates);
}

var calcUpwardsSeriesData = function calcUpwardsSeriesData(dataCount, extendDays) {
  return function () {
    return [{
      id: 'up-series-1',
      series: calcSingleSeriesData(calcAcc, 5, dataCount, extendDays)
    }, {
      id: 'up-series-2',
      series: calcSingleSeriesData(calcAcc, 15, dataCount, extendDays)
    }, {
      id: 'up-series-3',
      series: calcSingleSeriesData(calcAcc, 25, dataCount, extendDays)
    }];
  };
};

exports.calcUpwardsSeriesData = calcUpwardsSeriesData;

var calcDownwardsSeriesData = function calcDownwardsSeriesData(dataCount, extendDays) {
  return function () {
    return [{
      id: 'up-series-1',
      series: calcSingleSeriesData(calcBurndown, 100, dataCount, extendDays)
    }, {
      id: 'up-series-2',
      series: calcSingleSeriesData(calcBurndown, 200, dataCount, extendDays)
    }, {
      id: 'up-series-3',
      series: calcSingleSeriesData(calcBurndown, 600, dataCount, extendDays)
    }];
  };
};

exports.calcDownwardsSeriesData = calcDownwardsSeriesData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2NoYXJ0cy9saW5lLWNoYXJ0cy9tdWx0aXBsZS1zZXJpZXMtbGluZS1jaGFydC9zdG9yaWVzL2hlbHBlcnMudHMiXSwibmFtZXMiOlsiTk9XIiwiY2FsY0FjYyIsImRhdGEiLCJmb3JFYWNoIiwiaXRlbSIsImluZGV4IiwidmFsdWUiLCJjYWxjQnVybmRvd24iLCJjb3B5IiwiaSIsImxlbmd0aCIsImNhbGNTaW5nbGVTZXJpZXNEYXRhIiwiYWNjdW11bGF0b3IiLCJtdWx0aXBsaWVyIiwiZGF0YUNvdW50IiwiZXh0ZW5kRGF5cyIsIm5vdyIsImNsb25lIiwicmFuZG9tQmFzZSIsIkFycmF5IiwiZGF0ZSIsImFkZCIsInRvSVNPU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsImxhc3REYXRlIiwidGFpbGluZ0RhdGVzIiwiY29uY2F0IiwiY2FsY1Vwd2FyZHNTZXJpZXNEYXRhIiwiaWQiLCJzZXJpZXMiLCJjYWxjRG93bndhcmRzU2VyaWVzRGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLElBQU1BLEdBQUcsR0FBRyx5QkFBWjs7QUFFTyxTQUFTQyxPQUFULENBQWlCQyxJQUFqQixFQUE0QjtBQUNqQ0EsRUFBQUEsSUFBSSxDQUFDQyxPQUFMLENBQWEsVUFBQ0MsSUFBRCxFQUFZQyxLQUFaLEVBQTJCO0FBQ3RDLFFBQUlBLEtBQUssS0FBSyxDQUFkLEVBQWlCO0FBQ2Y7QUFDRDs7QUFDREQsSUFBQUEsSUFBSSxDQUFDRSxLQUFMLElBQWNKLElBQUksQ0FBQ0csS0FBSyxHQUFHLENBQVQsQ0FBSixDQUFnQkMsS0FBOUI7QUFDRCxHQUxEO0FBTUEsU0FBT0osSUFBUDtBQUNEOztBQUVNLFNBQVNLLFlBQVQsQ0FBc0JMLElBQXRCLEVBQWlDO0FBQ3RDLE1BQU1NLElBQUksR0FBRyx1QkFBVU4sSUFBVixDQUFiOztBQUNBLE9BQUssSUFBSU8sQ0FBQyxHQUFHRCxJ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b0JPLFNBQXBCLEVBQStCQyxVQUEvQjtBQUY5QixLQUxLLEVBU0w7QUFDRWMsTUFBQUEsRUFBRSxFQUFFLGFBRE47QUFFRUMsTUFBQUEsTUFBTSxFQUFFbkIsb0JBQW9CLENBQUNKLFlBQUQsRUFBZSxHQUFmLEVBQW9CTyxTQUFwQixFQUErQkMsVUFBL0I7QUFGOUIsS0FUSyxDQUFQO0FBY0QsR0Fmc0M7QUFBQSxDQUFoQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IGNsb25lRGVlcCwgbGFzdCwgcm91bmQgfSBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBOT1cgPSBtb21lbnQoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNBY2MoZGF0YTogYW55KSB7XG4gIGRhdGEuZm9yRWFjaCgoaXRlbTogYW55LCBpbmRleDogYW55KSA9PiB7XG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGl0ZW0udmFsdWUgKz0gZGF0YVtpbmRleCAtIDFdLnZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjQnVybmRvd24oZGF0YTogYW55KSB7XG4gIGNvbnN0IGNvcHkgPSBjbG9uZURlZXAoZGF0YSk7XG4gIGZvciAobGV0IGkgPSBjb3B5Lmxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29weVtpXS52YWx1ZSArPSBjb3B5W2kgKyAxXS52YWx1ZTtcbiAgfVxuICBjb3B5LmZvckVhY2goKGl0ZW06IGFueSkgPT4ge1xuICAgIGl0ZW0udmFsdWUgKz0gNTAwO1xuICB9KTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIGNhbGNTaW5nbGVTZXJpZXNEYXRhKGFjY3VtdWxhdG9yOiBhbnksIG11bHRpcGxpZXIgPSAxLCBkYXRhQ291bnQ6IGFueSwgZXh0ZW5kRGF5czogYW55KSB7XG4gIGNvbnN0IG5vdyA9IE5PVy5jbG9uZSgpO1xuICBjb25zdCByYW5kb21CYXNlID0gYWNjdW11bGF0b3IoXG4gICAgQXJyYXkuZnJvbShuZXcgQXJyYXkoZGF0YUNvdW50KSwgKCkgPT4gKHtcbiAgICAgIGRhdGU6IG5vdy5hZGQoMSwgJ2RheXMnKS50b0lTT1N0cmluZygpLFxuICAgICAgdmFsdWU6IHJvdW5kKE1hdGgucmFuZG9tKCkgKiBtdWx0aXBsaWVyKSxcbiAgICB9KSlcbiAgKTtcblxuICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoMjU3MSkgRklYTUU6IE9iamVjdCBpcyBvZiB0eXBlICd1bmtub3duJy5cbiAgY29uc3QgbGFzdERhdGUgPSBtb21lbnQobGFzdChyYW5kb21CYXNlKS5kYXRlKTtcbiAgY29uc3QgdGFpbGluZ0RhdGVzID0gQXJyYXkuZnJvbShuZXcgQXJyYXkoZXh0ZW5kRGF5cyksICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0ZTogbGFzdERhdGUuYWRkKDEsICdkYXlzJykudG9JU09TdHJpbmcoKSxcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcmFuZG9tQmFzZS5jb25jYXQodGFpbGluZ0RhdGVzKTtcbn1cblxuZXhwb3J0IGNvbnN0IGNhbGNVcHdhcmRzU2VyaWVzRGF0YSA9IChkYXRhQ291bnQ6IGFueSwgZXh0ZW5kRGF5czogYW55KSA9PiAoKSA9PiB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgaWQ6ICd1cC1zZXJpZXMtMScsXG4gICAgICBzZXJpZXM6IGNhbGNTaW5nbGVTZXJpZXNEYXRhKGNhbGNBY2MsIDUsIGRhdGFDb3VudCwgZXh0ZW5kRGF5cyksXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ3VwLXNlcmllcy0yJyxcbiAgICAgIHNlcmllczogY2FsY1NpbmdsZVNlcmllc0RhdGEoY2FsY0FjYywgMTUsIGRhdGFDb3VudCwgZXh0ZW5kRGF5cyksXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ3VwLXNlcmllcy0zJyxcbiAgICAgIHNlcmllczogY2FsY1NpbmdsZVNlcmllc0RhdGEoY2FsY0FjYywgMjUsIGRhdGFDb3VudCwgZXh0ZW5kRGF5cyksXG4gICAgfSxcbiAgXTtcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxjRG93bndhcmRzU2VyaWVzRGF0YSA9IChkYXRhQ291bnQ6IGFueSwgZXh0ZW5kRGF5czogYW55KSA9PiAoKSA9PiB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgaWQ6ICd1cC1zZXJpZXMtMScsXG4gICAgICBzZXJpZXM6IGNhbGNTaW5nbGVTZXJpZXNEYXRhKGNhbGNCdXJuZG93biwgMTAwLCBkYXRhQ291bnQsIGV4dGVuZERheXMpLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICd1cC1zZXJpZXMtMicsXG4gICAgICBzZXJpZXM6IGNhbGNTaW5nbGVTZXJpZXNEYXRhKGNhbGNCdXJuZG93biwgMjAwLCBkYXRhQ291bnQsIGV4dGVuZERheXMpLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICd1cC1zZXJpZXMtMycsXG4gICAgICBzZXJpZXM6IGNhbGNTaW5nbGVTZXJpZXNEYXRhKGNhbGNCdXJuZG93biwgNjAwLCBkYXRhQ291bnQsIGV4dGVuZERheXMpLFxuICAgIH0sXG4gIF07XG59O1xuIl19