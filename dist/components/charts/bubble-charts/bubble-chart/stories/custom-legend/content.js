"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.content = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _lodash = require("lodash");

var _react = _interopRequireWildcard(require("react"));

var _bubbleChart = _interopRequireDefault(require("../../bubble-chart"));

function ownKeys(object, enumerableOnly) { var keys = (0, _keys["default"])(object); if (_getOwnPropertySymbols["default"]) { var symbols = (0, _getOwnPropertySymbols["default"])(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return (0, _getOwnPropertyDescriptor["default"])(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3["default"])(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors["default"]) { (0, _defineProperties["default"])(target, (0, _getOwnPropertyDescriptors["default"])(source)); } else { ownKeys(Object(source)).forEach(function (key) { (0, _defineProperty2["default"])(target, key, (0, _getOwnPropertyDescriptor["default"])(source, key)); }); } } return target; }

function toThousands(num) {
  var ret = (0, _lodash.round)(num);

  if (ret < 1000) {
    return ret;
  }

  return "".concat((ret / 1000).toFixed(0), "k");
}

var COLOR_MAP = {
  'Current Sprint': '#FFC7AD',
  Average: '#A2C5F6'
};
var STROKE_COLOR_MAP = {
  'Current Sprint': '#F0876A',
  Average: '#4B90EE'
};

var content = function Content(_ref) {
  var _nameMap;

  var X_MIN = _ref.X_MIN,
      X_MAX = _ref.X_MAX,
      Y_MIN = _ref.Y_MIN,
      Y_MAX = _ref.Y_MAX,
      DEVEQ_MIN = _ref.DEVEQ_MIN,
      DEVEQ_MAX = _ref.DEVEQ_MAX,
      MAX_RADIUS = _ref.MAX_RADIUS;
  var NAME_CURRENT = 'Current Sprint';
  var NAME_AVG = 'Average';
  var data = [{
    issues: X_MAX,
    story_point: Y_MAX,
    dev_eq: DEVEQ_MAX,
    name: NAME_CURRENT
  }, {
    issues: X_MIN,
    story_point: Y_MIN,
    dev_eq: DEVEQ_MIN,
    name: NAME_AVG
  }];
  var xField = 'issues';
  var yField = 'story_point';
  var sizeField = 'dev_eq';
  var nameMap = (_nameMap = {}, (0, _defineProperty3["default"])(_nameMap, xField, 'Issues'), (0, _defineProperty3["default"])(_nameMap, yField, 'Story Point'), (0, _defineProperty3["default"])(_nameMap, sizeField, 'Dev Equivalent'), _nameMap);
  var xAxis = {
    min: X_MIN * 0.8,
    max: X_MAX * 1.2,
    grid: null,
    tickLine: null,
    tickCount: 3,
    title: {
      text: nameMap[xField],
      style: {
        fontSize: 14
      }
    }
  };
  var yAxisMax = Y_MAX === Y_MIN ? 2 * Y_MAX : Math.max(2 * Y_MAX - Y_MIN, 10);
  var yAxisMin = Y_MAX === Y_MIN ? -yAxisMax + 2 * Y_MAX : 0;
  var yAxis = {
    min: yAxisMin,
    max: yAxisMax,
    grid: {
      line: {
        style: {
          stroke: '#E0E0E5'
        }
      }
    },
    line: null,
    title: {
      text: nameMap[yField],
      style: {
        fontSize: 14
      }
    }
  };
  var regressionLineData = (0, _react.useMemo)(function () {
    var x1 = 0;
    var y1 = 0;
    var x2 = data[1][xField];
    var y2 = data[1][yField]; // y = slope * x + intercept

    var slope = (y2 - y1) / (x2 - x1);
    var intercept = y2 - x2 * slope;
    var x3 = xAxis.max * 1.5; // force it to overflow

    var y3 = slope * x3 + intercept;
    return [[x1, y1], [x3, y3]];
  }, [xAxis.min, yAxis.min, data]);
  var configurations = {
    xField: xField,
    yField: yField,
    sizeField: sizeField,
    colorField: 'name',
    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
    color: data.map(function (item) {
      return COLOR_MAP[item.name];
    }),
    size: [Math.max(1, DEVEQ_MIN * MAX_RADIUS / DEVEQ_MAX), MAX_RADIUS],
    xAxis: xAxis,
    yAxis: yAxis,
    nameMap: nameMap,
    tooltipValueFormatter: function tooltipValueFormatter(_name, value) {
      return toThousands(value);
    },
    label: null,
    legend: {
      layout: 'horizontal',
      position: 'top-right',
      custom: true,
      items: [{
        name: 'Size: DevEq',
        value: 0,
        marker: {
          style: {
            fill: '#E0E0E5',
            stroke: '#828487'
          }
        }
      }, {
        name: NAME_CURRENT,
        value: NAME_CURRENT,
        marker: {
          style: {
            fill: COLOR_MAP[NAME_CURRENT]
          }
        }
      }, {
        name: NAME_AVG,
        value: NAME_AVG,
        marker: {
          style: {
            fill: COLOR_MAP[NAME_AVG]
          }
        }
      }]
    },
    pointStyle: function pointStyle(x) {
      return {
        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        fill: COLOR_MAP[x.name],
        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        stroke: STROKE_COLOR_MAP[x.name],
        fillOpacity: 0.7,
        lineWidth: 2
      };
    },
    // straight line, origin point -> the central point of Average Bubble
    regressionLine: {
      type: 'linear',
      algorithm: regressionLineData,
      style: {
        stroke: '#C1C1C7',
        lineDash: [5]
      }
    },
    onReady: function onReady(plot) {
      // https://g2plot.antv.vision/zh/docs/api/options/interactions
      plot.chart.removeInteraction('legend-filter');
    }
  };
  return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("h1", null, "Custom Legend"), /*#__PURE__*/_react["default"].createElement("p", null, "Tip: Hover on bubbles to see tooltip"), /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      width: 800,
      height: 600
    }
  }, /*#__PURE__*/_react["default"].createElement(_bubbleChart["default"], {
    data: data,
    configurations: _objectSpread(_objectSpread({}, configurations), {}, {
      width: 800,
      height: 600
    })
  })));
};

exports.content = content;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,