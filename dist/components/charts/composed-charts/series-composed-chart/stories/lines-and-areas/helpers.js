"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.calcDownwardsSeriesData = exports.calcUpwardsSeriesData = exports.calcBurndown = exports.calcAcc = void 0;

var _from = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/from"));

var _moment = _interopRequireDefault(require("moment"));

var _lodash = require("lodash");

var NOW = (0, _moment["default"])('2020-12-01');

var calcAcc = function calcAcc(key) {
  return function (data) {
    data.forEach(function (item, index) {
      if (index === 0) {
        return;
      }

      item[key] += data[index - 1][key];
    });
    return data;
  };
};

exports.calcAcc = calcAcc;

var calcBurndown = function calcBurndown(key) {
  return function (data) {
    var copy = (0, _lodash.cloneDeep)(data);

    for (var i = copy.length - 2; i >= 0; i--) {
      copy[i][key] += copy[i + 1][key];
    }

    copy.forEach(function (item) {
      item[key] += 500;
    });
    return copy;
  };
};

exports.calcBurndown = calcBurndown;

function calcSeriesBase(keys, dataCount, extendDays) {
  var now = NOW.clone();
  var randomBase = (0, _from["default"])(new Array(dataCount), function () {
    var ret = keys.reduce(function (acc, curr) {
      acc[curr] = Math.random();
      return acc;
    }, {});
    ret.date = now.add(1, 'days').toISOString();
    return ret;
  });
  var lastDate = (0, _moment["default"])((0, _lodash.last)(randomBase).date);
  var tailingDates = (0, _from["default"])(new Array(extendDays), function () {
    var ret = keys.reduce(function (acc, curr) {
      acc[curr] = null;
      return acc;
    }, {});
    ret.date = lastDate.add(1, 'days').toISOString();
    return ret;
  });
  return randomBase.concat(tailingDates);
}

function adjustValue(data, key, factor) {
  data.forEach(function (item) {
    item[key] = (0, _lodash.round)(item[key] * factor);
  });
}
/**
 * Like:
 * [
 *  {
 *    line-1: number,
 *    line-2: number,
 *    issue-range: number,
 *    date: ISOString,
 *  }
 * ]
 */


var calcUpwardsSeriesData = function calcUpwardsSeriesData(_ref) {
  var dataCount = _ref.dataCount,
      extendDays = _ref.extendDays,
      _ref$keys = _ref.keys,
      keys = _ref$keys === void 0 ? ['line-1', 'line-2'] : _ref$keys,
      _ref$factors = _ref.factors,
      factors = _ref$factors === void 0 ? [100, 100] : _ref$factors,
      _ref$accumulators = _ref.accumulators,
      accumulators = _ref$accumulators === void 0 ? [calcBurndown, calcBurndown] : _ref$accumulators;
  return function () {
    var base = calcSeriesBase(keys, dataCount, extendDays); // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'key' implicitly has an 'any' type.

    keys.forEach(function (key, index) {
      adjustValue(base, key, factors[index]);
    }); // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'acc' implicitly has an 'any' type.

    accumulators.forEach(function (acc, index) {
      if (!acc) {
        return;
      }

      var key = keys[index];
      base = acc(key)(base);
    }); // base[base.length - 1][keys[0]] = 0;
    // NOTE: add range data for area chart

    base.forEach(function (row) {
      var upper = row[keys[0]] * 1.15;
      var lower = row[keys[1]] * 0.85;
      row['issue-range'] = [upper, lower];
    });
    return base;
  };
};

exports.calcUpwardsSeriesData = calcUpwardsSeriesData;
var calcDownwardsSeriesData = calcUpwardsSeriesData;
exports.calcDownwardsSeriesData = calcDownwardsSeriesData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,