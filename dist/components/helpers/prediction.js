"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.calcPredictionData = calcPredictionData;
exports.PREDICTION_TYPES = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _lodash = require("lodash");

var _regression = require("./regression");

var PREDICTION_TYPES = _regression.REGRESSION_TYPES;
exports.PREDICTION_TYPES = PREDICTION_TYPES;

function guessDateFormatMethod(value) {
  if (!Date.parse(value)) {
    return function (x) {
      return x;
    };
  }

  var d = new Date(value);

  if (value === d.toISOString()) {
    return Date.prototype.toISOString;
  }

  if (value === d.getTime()) {
    return Date.prototype.getTime;
  }

  if (value === d.toUTCString()) {
    return Date.prototype.toUTCString;
  }

  return function (x) {
    return x;
  };
}
/**
 * Calculate prediction line data
 */


function calc(_ref) {
  var type = _ref.type,
      body = _ref.body,
      tail = _ref.tail,
      x = _ref.x,
      y = _ref.y;

  try {
    if (!tail || !tail.length) {
      throw new Error('[Prediction Line] No prediction space left');
    }

    var start = (0, _lodash.last)(body); // const lastX = getLast(tail)[x];

    var _callRegression = (0, _regression.callRegression)({
      type: type,
      data: body,
      x: x,
      y: y
    }),
        slope = _callRegression.slope; // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.


    var intercept = start[y] - slope * start[x];

    var predict = function predict(x) {
      return slope * x + intercept;
    };

    return [// @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.
    [start[x], predict(start[x])]].concat((0, _toConsumableArray2["default"])(tail.map(function (point) {
      return [point[x], predict(point[x])];
    })));
  } catch (error) {
    console.log(error.message);
    return [];
  }
}
/**
 * Calculate prediction line data with formatting
 */


function calcPredictionData(_ref2) {
  var type = _ref2.type,
      data = _ref2.data,
      x = _ref2.x,
      y = _ref2.y;
  var copy = (0, _lodash.cloneDeep)(data); // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.

  var body = (0, _lodash.dropRightWhile)(copy, function (item) {
    return item[y] === null;
  }); // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.

  var tail = (0, _lodash.takeRightWhile)(copy, function (item) {
    return item[y] === null;
  }); // parse to timestamp for d3-regression's calc

  var basisX = data[0][x];
  var isDate = Date.parse(basisX);

  if (isDate) {
    var formatter = function formatter(point) {
      point[x] = new Date(point[x]).getTime();
    };

    body.forEach(formatter);
    tail.forEach(formatter);
  } // calc prediction line data


  var ret = calc({
    type: type,
    body: body,
    tail: (0, _lodash.cloneDeep)(tail),
    x: x,
    y: y
  }); // parse back to match original data type & k/v

  if (isDate) {
    var method = guessDateFormatMethod(basisX);
    ret.forEach(function (point) {
      var date = new Date(point[0]); // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 1.

      point[0] = method ? method.call(date) : date;
      point[x] = point[0];
    });
  }

  return {
    lineData: ret.map(function (_ref3) {
      var _ref5;

      var _ref4 = (0, _slicedToArray2["default"])(_ref3, 2),
          valX = _ref4[0],
          valY = _ref4[1];

      return _ref5 = {}, (0, _defineProperty2["default"])(_ref5, x, valX), (0, _defineProperty2["default"])(_ref5, y, valY), _ref5;
    })
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,