"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.parseInterpolation = exports.INTERPOLATION_TYPES = void 0;

var d3 = _interopRequireWildcard(require("d3-shape"));

var INTERPOLATION_TYPES = {
  basic: ['basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter'],
  func: {
    // bundle
    curveBundle100: d3.curveBundle.beta(1),
    curveBundle75: d3.curveBundle.beta(0.75),
    curveBundle50: d3.curveBundle.beta(0.5),
    curveBundle0: d3.curveBundle.beta(0),
    // cardinal
    cardinal100: d3.curveCardinal.tension(1),
    cardinal75: d3.curveCardinal.tension(0.75),
    cardinal50: d3.curveCardinal.tension(0.5),
    cardinal0: d3.curveCardinal.tension(0)
  }
};
exports.INTERPOLATION_TYPES = INTERPOLATION_TYPES;

var parseInterpolation = function parseInterpolation(type) {
  if (!type) {
    return 'monotone';
  } // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message


  return INTERPOLATION_TYPES.func[type] || type;
};

exports.parseInterpolation = parseInterpolation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2hlbHBlcnMvaW50ZXJwb2xhdGlvbi50cyJdLCJuYW1lcyI6WyJJTlRFUlBPTEFUSU9OX1RZUEVTIiwiYmFzaWMiLCJmdW5jIiwiY3VydmVCdW5kbGUxMDAiLCJkMyIsImN1cnZlQnVuZGxlIiwiYmV0YSIsImN1cnZlQnVuZGxlNzUiLCJjdXJ2ZUJ1bmRsZTUwIiwiY3VydmVCdW5kbGUwIiwiY2FyZGluYWwxMDAiLCJjdXJ2ZUNhcmRpbmFsIiwidGVuc2lvbiIsImNhcmRpbmFsNzUiLCJjYXJkaW5hbDUwIiwiY2FyZGluYWwwIiwicGFyc2VJbnRlcnBvbGF0aW9uIiwidHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRU8sSUFBTUEsbUJBQW1CLEdBQUc7QUFDakNDLEVBQUFBLEtBQUssRUFBRSxDQUNMLE9BREssRUFFTCxhQUZLLEVBR0wsV0FISyxFQUlMLFFBSkssRUFLTCxjQUxLLEVBTUwsU0FOSyxFQU9MLFdBUEssRUFRTCxXQVJLLEVBU0wsVUFUSyxFQVVMLE1BVkssRUFXTCxZQVhLLEVBWUwsV0FaSyxDQUQwQjtBQWVqQ0MsRUFBQUEsSUFBSSxFQUFFO0FBQ0o7QUFDQUMsSUFBQUEsY0FBYyxFQUFFQyxFQUFFLENBQUNDLFdBQUgsQ0FBZUMsSUFBZixDQUFvQixDQUFwQixDQUZaO0FBR0pDLElBQUFBLGFBQWEsRUFBRUgsRUFBRSxDQUFDQyxXQUFILENBQWVDLElBQWYsQ0FBb0IsSUFBcEIsQ0FIWDtBQUlKRSxJQUFBQSxhQUFhLEVBQUVKLEVBQUUsQ0FBQ0MsV0FBSCxDQUFlQyxJQUFmLENBQW9CLEdBQXBCLENBSlg7QUFLSkcsSUFBQUEsWUFBWSxFQUFFTCxFQUFFLENBQUNDLFdBQUgsQ0FBZUMsSUFBZixDQUFvQixDQUFwQixDQUxWO0FBTUo7QUFDQUksSUFBQUEsV0FBVyxFQUFFTixFQUFFLENBQUNPLGFBQUgsQ0FBaUJDLE9BQWpCLENBQXlCLENBQXpCLENBUFQ7QUFRSkMsSUFBQUEsVUFBVSxFQUFFVCxFQUFFLENBQUNPLGFBQUgsQ0FBaUJDLE9BQWpCLENBQXlCLElBQXpCLENBUlI7QUFTSkUsSUFBQUEsVUFBVSxFQUFFVixFQUFFLENBQUNPLGFBQUgsQ0FBaUJDLE9BQWpCLENBQXlCLEdBQXpCLENBVFI7QUFVSkcsSUFBQUEsU0FBUyxFQUFFWCxFQUFFLENBQUNPLGFBQUgsQ0FBaUJDLE9BQWpCLENBQXlCLENBQXpCO0FBVlA7QUFmMkIsQ0FBNUI7OztBQTZCQSxJQUFNSSxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLENBQUNDLElBQUQsRUFBZTtBQUMvQyxNQUFJLENBQUNBLElBQUwsRUFBVztBQUNULFdBQU8sVUFBUDtBQUNELEdBSDhDLENBSS9DOzs7QUFDQSxTQUFPakIsbUJBQW1CLENBQUNFLElBQXBCLENBQXlCZSxJQUF6QixLQUFrQ0EsSUFBekM7QUFDRCxDQU5NIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMtc2hhcGUnO1xuXG5leHBvcnQgY29uc3QgSU5URVJQT0xBVElPTl9UWVBFUyA9IHtcbiAgYmFzaWM6IFtcbiAgICAnYmFzaXMnLFxuICAgICdiYXNpc0Nsb3NlZCcsXG4gICAgJ2Jhc2lzT3BlbicsXG4gICAgJ2xpbmVhcicsXG4gICAgJ2xpbmVhckNsb3NlZCcsXG4gICAgJ25hdHVyYWwnLFxuICAgICdtb25vdG9uZVgnLFxuICAgICdtb25vdG9uZVknLFxuICAgICdtb25vdG9uZScsXG4gICAgJ3N0ZXAnLFxuICAgICdzdGVwQmVmb3JlJyxcbiAgICAnc3RlcEFmdGVyJyxcbiAgXSxcbiAgZnVuYzoge1xuICAgIC8vIGJ1bmRsZVxuICAgIGN1cnZlQnVuZGxlMTAwOiBkMy5jdXJ2ZUJ1bmRsZS5iZXRhKDEpLFxuICAgIGN1cnZlQnVuZGxlNzU6IGQzLmN1cnZlQnVuZGxlLmJldGEoMC43NSksXG4gICAgY3VydmVCdW5kbGU1MDogZDMuY3VydmVCdW5kbGUuYmV0YSgwLjUpLFxuICAgIGN1cnZlQnVuZGxlMDogZDMuY3VydmVCdW5kbGUuYmV0YSgwKSxcbiAgICAvLyBjYXJkaW5hbFxuICAgIGNhcmRpbmFsMTAwOiBkMy5jdXJ2ZUNhcmRpbmFsLnRlbnNpb24oMSksXG4gICAgY2FyZGluYWw3NTogZDMuY3VydmVDYXJkaW5hbC50ZW5zaW9uKDAuNzUpLFxuICAgIGNhcmRpbmFsNTA6IGQzLmN1cnZlQ2FyZGluYWwudGVuc2lvbigwLjUpLFxuICAgIGNhcmRpbmFsMDogZDMuY3VydmVDYXJkaW5hbC50ZW5zaW9uKDApLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlSW50ZXJwb2xhdGlvbiA9ICh0eXBlOiBhbnkpID0+IHtcbiAgaWYgKCF0eXBlKSB7XG4gICAgcmV0dXJuICdtb25vdG9uZSc7XG4gIH1cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciB0cy1taWdyYXRlKDcwNTMpIEZJWE1FOiBFbGVtZW50IGltcGxpY2l0bHkgaGFzIGFuICdhbnknIHR5cGUgYmVjYXVzZSBleHByZS4uLiBSZW1vdmUgdGhpcyBjb21tZW50IHRvIHNlZSB0aGUgZnVsbCBlcnJvciBtZXNzYWdlXG4gIHJldHVybiBJTlRFUlBPTEFUSU9OX1RZUEVTLmZ1bmNbdHlwZV0gfHwgdHlwZTtcbn07XG4iXX0=