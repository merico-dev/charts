"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.REFERENCE_LINE_LABEL_POSITION = void 0;

var _react = _interopRequireDefault(require("react"));

var _bizcharts = require("bizcharts");

var _utils = require("../helpers/utils");

var REFERENCE_LINE_LABEL_POSITION = {
  LEFT: 'left',
  CENTER: 'center',
  RIGHT: 'right'
};
exports.REFERENCE_LINE_LABEL_POSITION = REFERENCE_LINE_LABEL_POSITION;
var G2_GUIDE_LINE_TEXT_POS = {
  left: 'start',
  center: 'center',
  right: 'end'
};
var G2_GUIDE_LINE_TEXT_OFFSET_X_H = {
  left: 5,
  center: 0,
  right: -5
};
var G2_GUIDE_LINE_TEXT_OFFSET_X_V = {
  left: 5,
  center: 5,
  right: 5
};
var G2_GUIDE_LINE_TEXT_OFFSET_Y_H = {
  left: -5,
  center: -5,
  right: -5
};
var G2_GUIDE_LINE_TEXT_OFFSET_Y_V = {
  left: 5,
  center: 0,
  right: -5
};

function ReferenceLine(_ref) {
  var _ref$transpose = _ref.transpose,
      transpose = _ref$transpose === void 0 ? false : _ref$transpose,
      _ref$vertical = _ref.vertical,
      vertical = _ref$vertical === void 0 ? false : _ref$vertical,
      _ref$renderOnTop = _ref.renderOnTop,
      renderOnTop = _ref$renderOnTop === void 0 ? false : _ref$renderOnTop,
      _ref$xScaleKey = _ref.xScaleKey,
      xScaleKey = _ref$xScaleKey === void 0 ? 'id' : _ref$xScaleKey,
      _ref$yScaleKey = _ref.yScaleKey,
      yScaleKey = _ref$yScaleKey === void 0 ? 'value' : _ref$yScaleKey,
      value = _ref.value,
      renderLabel = _ref.renderLabel,
      labelText = _ref.labelText,
      _ref$labelPosition = _ref.labelPosition,
      labelPosition = _ref$labelPosition === void 0 ? REFERENCE_LINE_LABEL_POSITION.LEFT : _ref$labelPosition,
      _ref$labelFillColor = _ref.labelFillColor,
      labelFillColor = _ref$labelFillColor === void 0 ? '#727272' : _ref$labelFillColor,
      labelStrokeColor = _ref.labelStrokeColor,
      _ref$stroke = _ref.stroke,
      stroke = _ref$stroke === void 0 ? '#727272' : _ref$stroke;
  return /*#__PURE__*/_react["default"].createElement(_bizcharts.Guide.Line, {
    top: renderOnTop,
    start: vertical ? (0, _utils.deriveG2VerticalGuideEndpointPos)(value, '0%', xScaleKey, transpose) : (0, _utils.deriveG2HorizontalGuideEndpointPos)('0%', value, yScaleKey, transpose),
    end: vertical ? (0, _utils.deriveG2VerticalGuideEndpointPos)(value, '100%', xScaleKey, transpose) : (0, _utils.deriveG2HorizontalGuideEndpointPos)('100%', value, yScaleKey, transpose),
    lineStyle: {
      stroke: stroke,
      lineDash: [0, 1, 1],
      lineWidth: 1
    },
    text: {
      style: {
        fill: labelFillColor,
        stroke: labelStrokeColor,
        // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
        lineWidth: 0.2,
        textAlign: labelPosition,
        fontSize: 12,
        fontWeight: 400
      },
      content: renderLabel ? renderLabel() : labelText,
      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      position: G2_GUIDE_LINE_TEXT_POS[labelPosition],
      offsetX: vertical ? // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      G2_GUIDE_LINE_TEXT_OFFSET_X_V[labelPosition] : // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      G2_GUIDE_LINE_TEXT_OFFSET_X_H[labelPosition],
      offsetY: vertical ? // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      G2_GUIDE_LINE_TEXT_OFFSET_Y_V[labelPosition] : // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      G2_GUIDE_LINE_TEXT_OFFSET_Y_H[labelPosition]
    }
  });
}

var _default = ReferenceLine;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,